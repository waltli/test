#代码混淆压缩比，在0和7之间，默认为5，一般不需要改
-optimizationpasses 5

# 指定混淆时采用的算法，后面的参数是一个过滤器
# 这个过滤器是谷歌推荐的算法，一般不改变
#-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
 
#混淆时不使用大小写混合，混淆后的类名为小写
-dontusemixedcaseclassnames

#指定不去忽略非公共的库的类
-dontskipnonpubliclibraryclasses

#指定不去忽略非公共的库的类的成员
-dontskipnonpubliclibraryclassmembers
 
# 不做预校验，preverify是proguard的4个步骤之一，注！！！java项目一定不能加上，否则jvm会验证不通过
#-dontpreverify
 
# 有了verbose这句话，混淆后就会生成映射文件
# 包含有类名->混淆后类名的映射关系
# 然后使用printmapping指定映射文件的名称
-verbose
-printmapping proguardMapping.txt

#混淆时应用侵入式重载 
#-overloadaggressively
 
#优化时允许访问并修改有修饰符的类和类的成员 
#-allowaccessmodification
 
#忽略警告
-ignorewarnings

#不做shrink（不删除注释、未被引用的代码）
-dontshrink

#不做optimize（不变更代码的实现逻辑）
-dontoptimize

#不混淆包名
#-keeppackagenames

#不混淆的属性 异常，内部类，注解，泛型，异常源代码，异常行号
-keepattributes Exceptions,InnerClasses,*Annotation*,Signature,SourceFile,LineNumberTable

#不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射
#-keepclassmembers public class * {
#	void set*(***);
#	*** get*();
#}

#保留jar包的路徑信息，如果jar中含有需要被spring掃描的組件時使用
-keepdirectories

#指定包名下的类或子包下的类以及类中的public方法不被混淆
-keep class oth.** {
    public <methods>;
}

#含有@Test注解的类
-keep @oth.common.anotation.Test class *

#含有@Test注解类成员不被混淆
-keepclassmembers class * {
    @oth.common.anotation.Test *;
}

#指定Message类和类中的指定s方法不被混淆
#-keep class com.qzsoft.Message {
#	public void s(java.lang.String, java.lang.String);
#}

#保持类和类成员（含有主方法的类）
-keepclasseswithmembers public class * {
    public static void main(java.lang.String[]);
}
 
#保持类成员-所有枚举的静态values方法和valueOf方法
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}
 
#保持-保持所有实现至sql驱动的类
-keep class * extends java.sql.Driver

#保留本地native方法不被混淆
-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}

#保留Serializable序列化的类不被混淆
#-keepclassmembers class * implements java.io.Serializable {
#    static final long serialVersionUID;
#    private static final java.io.ObjectStreamField[] serialPersistentFields;
#    private void writeObject(java.io.ObjectOutputStream);
#    private void readObject(java.io.ObjectInputStream);
#    java.lang.Object writeReplace();
#    java.lang.Object readResolve();
#}